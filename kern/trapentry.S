/* See COPYRIGHT for copyright information. */

#include <inc/mmu.h>
#include <inc/memlayout.h>
#include <inc/trap.h>



###################################################################
# exceptions/interrupts
###################################################################

/* TRAPHANDLER defines a globally-visible function for handling a trap.
 * It pushes a trap number onto the stack, then jumps to _alltraps.
 * Use TRAPHANDLER for traps where the CPU automatically pushes an error code.
 *
 * You shouldn't call a TRAPHANDLER function from C, but you may
 * need to _declare_ one in C (for instance, to get a function pointer
 * during IDT setup).  You can declare the function with
 *   void NAME();
 * where NAME is the argument passed to TRAPHANDLER.
 */
#define TRAPHANDLER(name, num)						\
	.globl name;		/* define global symbol for 'name' */	\
	.type name, @function;	/* symbol type is function */		\
	.align 2;		/* align function definition */		\
	name:			/* function starts here */		\
	pushl $(num);							\
	jmp _alltraps

/* Use TRAPHANDLER_NOEC for traps where the CPU doesn't push an error code.
 * It pushes a 0 in place of the error code, so the trap frame has the same
         
 * format in either case.
 */
#define TRAPHANDLER_NOEC(name, num)					\
	.globl name;							\
	.type name, @function;						\
	.align 2;							\
	name:								\
	pushl $0;							\
	pushl $(num);							\
	jmp _alltraps

.text

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */
TRAPHANDLER_NOEC(_DIVIDE , T_DIVIDE )		// divide error
TRAPHANDLER_NOEC(_DEBUG  , T_DEBUG  )		// debug exception
TRAPHANDLER_NOEC(_NMI    , T_NMI    )		// non-maskable interrupt
TRAPHANDLER_NOEC(_BRKPT  , T_BRKPT  )		// breakpoint
TRAPHANDLER_NOEC(_OFLOW  , T_OFLOW  )		// overflow
TRAPHANDLER_NOEC(_BOUND  , T_BOUND  )		// bounds check
TRAPHANDLER_NOEC(_ILLOP  , T_ILLOP  )		// illegal opcode
TRAPHANDLER_NOEC(_DEVICE , T_DEVICE )		// device not available
TRAPHANDLER(_DBLFLT , T_DBLFLT )		// double fault
// TRAPHANDLER(COPROC , T_COPROC )     // reserved (not generated by recent processors)
TRAPHANDLER(_TSS    , T_TSS    )		// invalid task switch segment
TRAPHANDLER(_SEGNP  , T_SEGNP  )		// segment not present
TRAPHANDLER(_STACK  , T_STACK  )		// stack exception
TRAPHANDLER(_GPFLT  , T_GPFLT  )		// general protection fault
TRAPHANDLER(_PGFLT  , T_PGFLT  )		// page fault
// TRAPHANDLER(RES    , T_RES    )	    // reserved
TRAPHANDLER_NOEC(_FPERR  , T_FPERR  )		// floating point error
TRAPHANDLER(_ALIGN  , T_ALIGN  )		// aligment check
TRAPHANDLER(_MCHK   , T_MCHK   )		// machine check
TRAPHANDLER(_SIMDERR, T_SIMDERR)		// SIMD floating point error
            
TRAPHANDLER(_SYSCALL, T_SYSCALL)     // system call
TRAPHANDLER(_DEFAULT, T_DEFAULT)		// catchall
            
TRAPHANDLER(_TIMER   , IRQ_OFFSET + IRQ_TIMER   )
TRAPHANDLER(_KBD     , IRQ_OFFSET + IRQ_KBD     )
TRAPHANDLER(_SERIAL  , IRQ_OFFSET + IRQ_SERIAL  )
TRAPHANDLER(_SPURIOUS, IRQ_OFFSET + IRQ_SPURIOUS)
TRAPHANDLER(_IDE     , IRQ_OFFSET + IRQ_IDE     )
TRAPHANDLER(_ERROR   , IRQ_OFFSET + IRQ_ERROR   )

/*
 * Lab 3: Your code here for _alltraps
 */
 _alltraps:
    # Build trap frame.
    pushl %ds    
    pushl %es
    // pushl %fs
    // pushl %gs
    pushal

    # Set up data segments.
    movw $GD_KD, %ax
    movw %ax, %ds
    movw %ax, %es

    # Call trap(tf), where tf=%esp
    pushl %esp
    call trap



